# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


# The configuration file needs to define the sources, 
# the channels and the sinks.
# Sources, channels and sinks are defined per agent, 
# in this case called 'agent'

#agent.sources = dtFlumeSource
#agent.channels = memoryChannel
#agent.sinks = dtFlumeSink

# For each one of the sources, the type is defined
#agent.sources.dtFlumeSource.type = com.dynatrace.diagnostics.btexport.flume.HttpFlumeSource
#agent.sources.dtFlumeSource.channels = memoryChannel

# Each sink's type must be defined
#agent.sinks.dtFlumeSink.type = com.dynatrace.diagnostics.btexport.flume.BTExportSink
#agent.sinks.dtFlumeSink.channel = memoryChannel

#agent.channels.memoryChannel.type = memory

# Other config values specific to each type of channel(sink or source)
# can be defined as well
# In this case, it specifies the capacity of the memory channel
#agent.channels.memoryChannel.capacity = 100

# example.conf: A single-node Flume configuration

# Name the components on this agent
agent1.sources = dynaTraceServer
agent1.sinks = purepath pageaction visit alerts
agent1.channels = purepath pageaction visit alerts

# Describe/configure dynaTraceServer
#agent1.sources.dynaTraceServer.type = com.dynatrace.diagnostics.btexport.flume.HttpFlumeSource
agent1.sources.dynaTraceServer.type = org.apache.flume.source.http.HTTPSource
agent1.sources.dynaTraceServer.port = 4321
agent1.sources.dynaTraceServer.handler = com.dynatrace.diagnostics.flume.MetaHandler

# Describe sinks
agent1.sinks.purepath.type = com.dynatrace.diagnostics.flume.RollingFileSink
# once an hour 
agent1.sinks.purepath.sink.rollInterval = 3600
# Force cutoff at 100 MB
agent1.sinks.purepath.sink.rollSize = 100
agent1.sinks.purepath.sink.directory = ../log/bt-export/pp
agent1.sinks.purepath.batchSize = 1000
agent1.sinks.purepath.sink.serializer = com.dynatrace.diagnostics.btexport.flume.BtPurePathSerializerBuilder


agent1.sinks.pageaction.type = com.dynatrace.diagnostics.flume.RollingFileSink
# once an hour 
agent1.sinks.pageaction.sink.rollInterval = 3600
# Force cutoff at 100 MB
agent1.sinks.pageaction.sink.rollSize = 100
agent1.sinks.pageaction.sink.directory = ../log/bt-export/pa
agent1.sinks.pageaction.batchSize = 1000
agent1.sinks.pageaction.sink.serializer = com.dynatrace.diagnostics.btexport.flume.BtPageActionSerializerBuilder


agent1.sinks.visit.type = com.dynatrace.diagnostics.flume.RollingFileSink
# once an hour 
agent1.sinks.visit.sink.rollInterval = 3600
# Force cutoff at 100 MB
agent1.sinks.visit.sink.rollSize = 100
agent1.sinks.visit.sink.directory = ../log/bt-export/visit
agent1.sinks.visit.batchSize = 1000
agent1.sinks.visit.sink.serializer = com.dynatrace.diagnostics.btexport.flume.BtVisitSerializerBuilder

agent1.sinks.alerts.type = file_roll 
agent1.sinks.alerts.sink.rollInterval = 3600
agent1.sinks.alerts.sink.directory = ../log/alerts
agent1.sinks.alerts.batchSize = 10



# Use a channel which buffers events in memory
agent1.channels.purepath.type = memory
agent1.channels.purepath.capacity = 1000000
agent1.channels.purepath.transactionCapactiy = 1000

agent1.channels.pageaction.type = memory
agent1.channels.pageaction.capacity = 1000000
agent1.channels.pageaction.transactionCapactiy = 1000

agent1.channels.visit.type = memory
agent1.channels.visit.capacity = 1000
agent1.channels.visit.transactionCapactiy = 1000

agent1.channels.alerts.type = memory
agent1.channels.alerts.capacity = 10000
agent1.channels.alerts.transactionCapactiy = 100

# Bind the source and sink to the channel
agent1.sources.dynaTraceServer.channels = purepath pageaction visit alerts
agent1.sinks.purepath.channel = purepath
agent1.sinks.pageaction.channel = pageaction
agent1.sinks.visit.channel = visit
agent1.sinks.alerts.channel = alerts

agent1.sources.dynaTraceServer.selector.type = multiplexing
agent1.sources.dynaTraceServer.selector.header = btType
agent1.sources.dynaTraceServer.selector.mapping.PUREPATH = purepath
agent1.sources.dynaTraceServer.selector.mapping.PAGE_ACTION = pageaction
agent1.sources.dynaTraceServer.selector.mapping.VISIT = visit
agent1.sources.dynaTraceServer.selector.mapping.ALERT = alerts
agent1.sources.dynaTraceServer.selector.default = purepath